#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ESP8266WiFi.h>
#include <DHT.h>
#define DHTPIN D4     // Pin where DHT11 is connected
#define DHTTYPE DHT11 

DHT dht(DHTPIN, DHTTYPE);
bool weatherDisplayed = false;


const char* ssid = "Airtel_A2G3S";
const char* password = "AIRTELNEWEST";

// LCD Setup
LiquidCrystal_I2C lcd(0x27, 16, 2);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 300000);

// Button Setup
const int buttonPinTime = D5;
const int buttonPinStopwatch = D6;
const int buttonPinweather = D7;


  // DHT11 sensor

int screenMode = 0;  // 0: Time, 1: Date, 2: Stopwatch Running, 3: Stopwatch Paused
bool lastButtonStateTime = HIGH;
bool lastButtonStateStopwatch = HIGH;
static bool lastweatherButtonState = HIGH;

// Stopwatch Variables
bool stopwatchRunning = false;
unsigned long stopwatchStart = 0;
unsigned long elapsedTime = 0;
unsigned long lastUpdateTime = 0;


 // Store fetched weather data

void setup() {
  Serial.begin(115200);
  Wire.begin(D2, D1);
  dht.begin();

  lcd.init();
  lcd.backlight();
  pinMode(buttonPinTime, INPUT_PULLUP);
  pinMode(buttonPinStopwatch, INPUT_PULLUP);

  lcd.setCursor(0, 0);
  lcd.print("Hii Saikat Sir");
  lcd.setCursor(0, 1);
  lcd.print("I am Jarvis");
  delay(2000);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Sir, please");
  lcd.setCursor(0, 1);
  lcd.print("connect WiFi...");
  delay(1000);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connected, Sir");
  delay(1000);
  lcd.clear();

  timeClient.begin();
}

void loop() {
    timeClient.update();
    handleTimeButton();
    handleStopwatchButton();
    handleWeatherButton();
    Serial.print("Current screenMode: ");
Serial.println(screenMode);


//     if (screenMode == 4) {
//           if (millis() - lastUpdateTime >= 1000) {
//         lastUpdateTime = millis();
//         displayWeatherFromDHT();
//     }
//                }
//  else if (screenMode == 2 && millis() - lastUpdateTime >= 1000) {
//         lastUpdateTime = millis();
//         updateStopwatchDisplay();
//     } else if (screenMode == 0 && millis() - lastUpdateTime >= 1000) {
//         lastUpdateTime = millis();
//         showTime();
//     }
switch (screenMode) {
  case 4:  // Weather Mode
    if (millis() - lastUpdateTime >= 1000) {
      lastUpdateTime = millis();
      displayWeatherFromDHT();
    }
    break;

  case 2:  // Stopwatch Running
    if (millis() - lastUpdateTime >= 1000) {
      lastUpdateTime = millis();
      updateStopwatchDisplay();
    }
    break;

  case 0:  // Time Display
    if (millis() - lastUpdateTime >= 1000) {
      lastUpdateTime = millis();
      showTime();
    }
    break;

  // Optional: Add other modes like screenMode 1 (date) or 3 (paused stopwatch) if needed
}



}




void handleTimeButton() {
  bool buttonState = digitalRead(buttonPinTime);
  if (buttonState == LOW && lastButtonStateTime == HIGH) {
    screenMode = (screenMode == 0) ? 1 : 0;  // Toggle 0 (Time) / 1 (Date)
    lcd.clear();
    displayMode();
    delay(200);
  }
  lastButtonStateTime = buttonState;
}





void handleStopwatchButton() {
  bool buttonState = digitalRead(buttonPinStopwatch);
  if (buttonState == LOW && lastButtonStateStopwatch == HIGH) {
    screenMode = (screenMode == 2) ? 3 : 2;  // Toggle 2 (Start) / 3 (Pause)

    if (screenMode == 2) {
      stopwatchRunning = true;
      stopwatchStart = millis() - elapsedTime;
    } else {
      stopwatchRunning = false;
      elapsedTime = millis() - stopwatchStart;
    }

    lcd.clear();
    updateStopwatchDisplay();
    delay(200);
  }
  lastButtonStateStopwatch = buttonState;
}



void displayMode() {
  lcd.clear();
  if (screenMode == 0) showTime();
  else if (screenMode == 1) showDate();
}

void showTime() {
  int hours = timeClient.getHours();
  int minutes = timeClient.getMinutes();
  int seconds = timeClient.getSeconds();
  String ampm = (hours >= 12) ? "PM" : "AM";

  if (hours > 12) hours -= 12;
  if (hours == 0) hours = 12;

  lcd.setCursor(0, 0);
  lcd.print("TIME:");
  if (hours < 10) lcd.print("0");
  lcd.print(hours);
  lcd.print(":");
  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);

  lcd.setCursor(14, 0);
  lcd.print(ampm);
}

void showDate() {
  time_t epochTime = timeClient.getEpochTime();
  struct tm* ptm = gmtime(&epochTime);

  lcd.setCursor(0, 0);
  lcd.print("DATE:");
  if (ptm->tm_mday < 10) lcd.print("0");
  lcd.print(ptm->tm_mday);
  lcd.print(":");
  if (ptm->tm_mon + 1 < 10) lcd.print("0");
  lcd.print(ptm->tm_mon + 1);
  lcd.print(":");
  lcd.print(ptm->tm_year + 1900);
}

void updateStopwatchDisplay() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Stopwatch:");

  unsigned long timeElapsed = stopwatchRunning ? millis() - stopwatchStart : elapsedTime;
  unsigned long sec = (timeElapsed / 1000) % 60;
  unsigned long min = (timeElapsed / 60000) % 60;
  unsigned long hr = (timeElapsed / 3600000);

  lcd.setCursor(0, 1);
  if (hr < 10) lcd.print("0");
  lcd.print(hr);
  lcd.print(".");
  if (min < 10) lcd.print("0");
  lcd.print(min);
  lcd.print(".");
  if (sec < 10) lcd.print("0");
  lcd.print(sec);
}

//weather button
void handleWeatherButton() {
    bool buttonState = digitalRead(buttonPinweather);

    if (buttonState == LOW && lastweatherButtonState == HIGH) {
        screenMode = 4; // Set mode to weather
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Collecting data...");
        delay(1000);
        lastUpdateTime = 0; // Force immediate update
        displayWeatherFromDHT();
    }

    lastweatherButtonState = buttonState;
}








void displayWeatherFromDHT() {
    float temp = dht.readTemperature();
    float hum = dht.readHumidity();

    lcd.clear();
    if (isnan(temp) || isnan(hum)) {
        lcd.setCursor(0, 0);
        lcd.print("Sensor Error!"); 
    } else {
        lcd.setCursor(0, 0);
        lcd.print("Temp: ");
        lcd.print(temp);
        lcd.print((char)223); // degree symbol
        lcd.print("C");

        lcd.setCursor(0, 1);
        lcd.print("Hum: ");
        lcd.print(hum);
        lcd.print("%");
    }
    Serial.print("Temp: ");
Serial.println(temp);
Serial.print("Humidity: ");
Serial.println(hum);

}












